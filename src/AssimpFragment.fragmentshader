#version 330 core

struct Material {
	sampler2D diffuse;
    sampler2D specular;
    float     shininess;
};  

struct DLight {
	vec3 Lambient;
	vec3 Ldiffuse;
	vec3 Lspecular;	
	vec3 Ldirection;
	float bright;
};

in vec3 FragPos;  
in vec3 Normal;  
in vec2 TexCoords;
  
out vec4 color;
  
uniform vec3 viewPos;
uniform Material material;
uniform DLight dlight;

vec3 DirectionalLight(DLight light, vec3 Normal, vec3 viewDirection);

void main(){
	vec4 TextureColor;
	vec3 viewDir = normalize(viewPos - FragPos);
	TextureColor += vec4(DirectionalLight(dlight,Normal,viewDir),1);
	color=TextureColor;
} 

vec3 DirectionalLight(DLight light, vec3 Normal, vec3 viewDirection){
	// Ambient
	vec3 ambient = light.Lambient* vec3(texture(material.diffuse, TexCoords));
   	vec3 lightDir = normalize(-light.Ldirection);
 
	// Diffuse 
    vec3 norm = normalize(Normal);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.Ldiffuse * diff * vec3(texture(material.diffuse, TexCoords));
    
    // Specular
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDirection, reflectDir), 0.0), material.shininess);
    vec3 specular = light.Lspecular * spec * vec3(texture(material.specular, TexCoords));  
    
	// Finally    
    vec3 colorD = (2-light.bright)*(ambient + diffuse + specular);
	return colorD;
}
